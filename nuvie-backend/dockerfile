################################################################################
# Build stage
################################################################################

FROM ghcr.io/astral-sh/uv:bookworm-slim AS build
ENV UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy

ENV UV_PYTHON_INSTALL_DIR=/python
ENV UV_PYTHON_PREFERENCE=only-managed

WORKDIR /app

# Copy nuvie-sdk from additional context to make it available for dependency resolution
COPY --from=nuvie-sdk . /nuvie-sdk

COPY .python-version .python-version

# Install Python before the project for caching
RUN uv python install

RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --locked --no-install-project --no-dev
COPY . /app
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --locked --no-dev

################################################################################
# Application stage (without uv)
################################################################################

FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd --gid 1000 app && useradd --uid 1000 --gid app --shell /bin/bash --create-home app

# Copy the Python installation from the build stage
COPY --from=build /python /python

# Copy the application from the build (including .venv)
COPY --from=build --chown=app:app /app /app

# Copy the nuvie-sdk from the build stage
COPY --from=build --chown=app:app /nuvie-sdk /nuvie-sdk

# Make sure the Python directory is accessible to the app user
RUN chmod -R 755 /python
RUN chown -R app:app /python

# Add the virtual environment to PATH
ENV PATH="/app/.venv/bin:$PATH"

# Add /app to PYTHONPATH. This allows the application to correctly import modules
# from the /app/src directory directly
ENV PYTHONPATH="/app/src:$PYTHONPATH"

USER app
WORKDIR /app

# Run FastAPI application
CMD ["fastapi", "dev", "--host", "0.0.0.0", "/app/src"]